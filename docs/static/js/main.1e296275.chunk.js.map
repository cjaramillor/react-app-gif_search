{"version":3,"sources":["components/addCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","newCategory","setNewCategory","onSubmit","event","preventDefault","categories","id","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","img","title","embed_url","GifItem","props","className","src","frameBorder","allowFullScreen","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","images","ComponentPrincipal","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"6MAkCeA,EA/BK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEAC,mBAAS,IAFT,mBAE/BC,EAF+B,KAElBC,EAFkB,KAgBtC,OACI,mCACA,uBAAMC,SAdW,SAACC,GAClBA,EAAMC,iBACa,KAAhBJ,IACCF,EAAc,IACdA,GAAc,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,SAUhD,UACI,4CACA,uBAAOC,GAAG,YAAYC,KAAK,OAAOC,MAAOR,EAAaS,SARzC,SAACN,GAClBF,EAAeE,EAAMO,OAAOF,QAOsDG,YAAY,mDAC1F,6B,+BCxBCC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAQD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACHjB,GAAIiB,EAAIjB,GACRkB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,cATE,kBAaZJ,GAbY,4CAAH,sDCaLK,EAXQ,SAAEC,GAErB,OACI,sBAAKC,UAAU,8CAAf,UACI,wBAAQC,IAAKF,EAAMZ,IAAKe,YAAY,IAAIF,UAAU,cAAcG,iBAAe,IAC/E,4BAAIJ,EAAMH,YCkBPQ,EArBC,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,ECDL,SAAEA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAW,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGlB,CAACpB,IAEIqB,EDbyBK,CAAa1B,GAAhC2B,EAFgB,EAErBpB,KAAYa,EAFS,EAETA,QAGpB,OACI,qCACA,6BAAKpB,IAEJoB,GAAW,mBAAGL,UAAU,kCAAb,sBACZ,qBAAKA,UAAU,YAAf,SAEIY,EAAOlB,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA0BA,GAAZA,EAAIjB,aEQnBmC,EArBY,WAAO,IAAD,EAEO1C,mBAAS,IAFhB,mBAEtBM,EAFsB,KAEVP,EAFU,KAI7B,OACI,gCACI,yCACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQO,EAAWiB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAaA,GAAvBA,YCXtC6B,IAASC,OACP,cAACC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1e296275.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) =>{\n\n    const [newCategory, setNewCategory] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if(newCategory !== ''){\n            setCategories([]);\n            setCategories(categories => [newCategory,...categories]);\n        }\n    }\n\n    const handleChange = (event) => {\n        setNewCategory(event.target.value);\n    }\n\n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n            <p>Buscar gif:</p>\n            <input id=\"categoria\" type=\"text\" value={newCategory} onChange={handleChange} placeholder=\"ingrese nueva categoria: electronica,decohogar\" />\n            <br></br>\n        </form>\n        </>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","export const getGifs = async( category ) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=cbIaMVmfeY7wC30Me29tynYFnaiapfkd`;\n    const resp = await fetch(url)\n    const {data} = await resp.json();\n\n    const gifts = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.embed_url\n        }\n    });\n\n    return gifts;\n}","import React from 'react';\n\nexport const GifItem = ( props ) =>{\n\n    return (\n        <div className=\"card animate__animated animate__fadeInRight\">\n            <iframe src={props.url} frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\n            <p>{props.title}</p>\n        </div>\n    )\n\n}\n\nexport default GifItem;","import React from \"react\";\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) =>{\n\n    const { data:images,loading } = useFetchGifs(category);\n    \n    \n    return (\n        <>\n        <h3>{category}</h3>\n\n        {loading && <p className=\"animate_animated animate__pulse\">cargando</p>}\n        <div className=\"card-grid\">\n         {\n            images.map(img =>(\n                <GifItem key={img.id} {...img}></GifItem>\n            ))\n         }\n        </div>\n        </>\n    );\n}\n\nexport default GifGrid;","import {useEffect, useState} from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) =>{\n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    })\n\n    useEffect( () =>{\n        getGifs(category)\n        .then(imgs =>{\n            setstate({\n                data:imgs,\n                loading:false\n            });\n        })\n    },[category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport AddCategory from './components/addCategory';\nimport GifGrid from './components/GifGrid';\n\nconst ComponentPrincipal = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return (\n        <div>\n            <h2>GifsApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                {\n                    categories.map( (category) =>\n                        <GifGrid key={category} category = { category }></GifGrid>\n                    )\n                }\n            </ol>\n        </div>\n    );\n}\n\n\nexport default ComponentPrincipal;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}